# -*- coding: utf-8 -*-
"""Map OCR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nlfRPSr3eiHO3rGkQiR5NvH6VNwB_ugH
"""

!sudo apt install tesseract-ocr
!pip install pytesseract

import pytesseract
import cv2
import matplotlib.pyplot as plt
import numpy as np

path = '/content/'
image_map = cv2.imread(path + "el nido_1.jpg", cv2.IMREAD_COLOR)
plt.figure(figsize=[15, 5])
plt.imshow(image_map)
plt.xlabel("Original", fontsize=15)
print(image_map.shape)

custom_config = r'--oem 3 --psm 3'
result = pytesseract.image_to_string(image_map, lang="eng", config=custom_config)
print(result)

def gray_scale(image):
  result = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  return result

image_map_gray = gray_scale(image_map)
plt.figure(figsize=[20, 5])
plt.subplot(1, 2, 1)
plt.imshow(image_map)
plt.xlabel("Original", fontsize=15)
print("image_map shape : ", image_map.shape)
plt.subplot(1, 2, 2)
plt.imshow(image_map_gray)
plt.xlabel("GrayScale", fontsize=15)
print("image_map_gray shape : ", image_map_gray.shape)

custom_config = r'--oem 3 --psm 3'
result = pytesseract.image_to_string(image_map_gray, lang="eng", config=custom_config)
print(result)

def image_threshold(image):
  result = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
  return result

image_map_binary = image_threshold(image_map_gray)
plt.figure(figsize=[20, 5])
plt.subplot(1, 2, 1)
plt.imshow(image_map_gray)
plt.xlabel("GrayScale", fontsize=15)
print("image_map_gray shape : ", image_map_gray.shape)
plt.subplot(1, 2, 2)
plt.imshow(image_map_binary)
plt.xlabel("Binary", fontsize=15)
print("image_map_binary shape : ", image_map_binary.shape)

custom_config = r'--oem 3 --psm 3'
result = pytesseract.image_to_string(image_map_binary, lang="eng", config=custom_config)
print(result)

def remove_noise(image, kernel_size=3):
  result = cv2.medianBlur(image, ksize=kernel_size)
  return result

image_map_rn = image_threshold(image_map_binary)
plt.figure(figsize=[20, 5])
plt.subplot(1, 2, 1)
plt.imshow(image_map_binary)
plt.xlabel("Binary", fontsize=15)
print("image_map_binary shape : ", image_map_binary.shape)
plt.subplot(1, 2, 2)
plt.imshow(image_map_rn)
plt.xlabel("Remove Noise", fontsize=15)
print("image_map_rn shape : ", image_map_rn.shape)

custom_config = r'--oem 3 --psm 3'
result = pytesseract.image_to_string(image_map_rn, lang="eng", config=custom_config)
print(result)

def erosion(image):
  kernel = np.ones((5, 5), np.uint8)
  result = cv2.erode(image, kernel, iterations = 1)
  return result

image_map_erosion = erosion(image_map_binary)
plt.figure(figsize=[20, 5])
plt.subplot(1, 2, 1)
plt.imshow(image_map_binary)
plt.xlabel("Binary", fontsize=15)
print("image_map_binary shape : ", image_map_binary.shape)
plt.subplot(1, 2, 2)
plt.imshow(image_map_erosion)
plt.xlabel("Erosion", fontsize=15)
print("image_map_dilate shape : ", image_map_erosion.shape)

custom_config = r'--oem 3 --psm 3'
result = pytesseract.image_to_string(image_map_erosion, lang="eng", config=custom_config)
print(result)